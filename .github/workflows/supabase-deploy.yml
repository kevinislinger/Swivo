name: Deploy Supabase

on:
  push:
    branches: [main]
    paths:
      - 'backend/supabase/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ vars.SUPABASE_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
      
      - name: Login to Supabase
        run: supabase login --token $SUPABASE_ACCESS_TOKEN
      
      - name: Link to Supabase project
        working-directory: ./backend/supabase
        run: supabase link --project-ref $SUPABASE_PROJECT_ID --password "$SUPABASE_DB_PASSWORD"
      
      - name: Deploy database migrations
        working-directory: ./backend/supabase
        run: supabase db push
      
      # Set environment variables based on branch
      - name: Set environment variables
        id: set_env
        run: |
          if [[ $GITHUB_REF == "refs/heads/main" ]]; then
            echo "IS_PRODUCTION=true" >> $GITHUB_ENV
            echo "APNS_KEY_ID=${{ secrets.APNS_KEY_ID_PRODUCTION }}" >> $GITHUB_ENV
            echo "Using production APNs configuration"
          else
            echo "IS_PRODUCTION=false" >> $GITHUB_ENV
            echo "APNS_KEY_ID=${{ secrets.APNS_KEY_ID_SANDBOX }}" >> $GITHUB_ENV
            echo "Using sandbox APNs configuration"
          fi

      # Deploy each Edge Function separately with environment variables
      - name: Deploy notify_match function with APNs configuration
        working-directory: ./backend/supabase
        env:
          # Use the appropriate APNs key based on branch
          APNS_KEY: ${{ github.ref == 'refs/heads/main' && secrets.APNS_KEY_PRODUCTION || secrets.APNS_KEY_SANDBOX }}
        run: |
          # Create a temporary env file with proper escaping
          echo "APPLE_TEAM_ID=${{ secrets.APPLE_TEAM_ID }}" > .env.temp
          echo "APPLE_BUNDLE_ID=${{ secrets.APPLE_BUNDLE_ID }}" >> .env.temp
          echo "APNS_KEY_ID=${{ env.APNS_KEY_ID }}" >> .env.temp
          echo "IS_PRODUCTION=${{ env.IS_PRODUCTION }}" >> .env.temp
          
          # Handle multiline PEM key by writing it to a temporary file
          # This avoids issues with escaping newlines in env variables
          echo "$APNS_KEY" > .apns_key.pem
          echo "APNS_KEY=$(cat .apns_key.pem | base64 -w 0)" >> .env.temp
          
          # Deploy with the temp env file
          supabase functions deploy notify_match --project-ref $SUPABASE_PROJECT_ID --no-verify-jwt --env-file .env.temp
          
          # Clean up temporary files
          rm -f .env.temp .apns_key.pem

      # Deploy other functions that don't need APNs config
      - name: Deploy other Edge Functions
        working-directory: ./backend/supabase
        run: |
          supabase functions deploy like_option --project-ref $SUPABASE_PROJECT_ID --no-verify-jwt
          supabase functions deploy update_apns_token --project-ref $SUPABASE_PROJECT_ID --no-verify-jwt

      - name: Verify deployment
        working-directory: ./backend/supabase
        run: |
          echo "âœ… Supabase deployment completed"
          echo "Database migrations applied"
          echo "Edge functions deployed with proper APNs configuration"